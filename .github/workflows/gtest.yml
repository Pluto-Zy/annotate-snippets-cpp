name: build-and-test

on: [push, pull_request]

defaults:
  run:
    shell: bash

jobs:
  build-ubuntu:
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        compiler: [ g++-9, g++-11, g++-13, clang++-11, clang++-15, clang++-20 ]
        build_type: [ Debug, Release ]
        libcxx: [ false, true ]
        exclude:
          - compiler: g++-9
            libcxx: true
          - compiler: g++-11
            libcxx: true
          - compiler: g++-13
            libcxx: true

    name: Build and Test on Ubuntu
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v4

      - name: Install Clang
        if: startsWith(matrix.compiler, 'clang++')
        run: |
          sudo apt-get update
          sudo apt-get install -y wget lsb-release software-properties-common
          VERSION=$(echo ${{ matrix.compiler }} | cut -d'-' -f2) # Extracts the version number

          if ! apt-cache show clang-$VERSION > /dev/null 2>&1; then
            echo "clang-$VERSION not available via apt, using llvm.sh"
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh $VERSION
          else
            echo "Installing clang-$VERSION via apt"
            sudo apt-get install -y clang-$VERSION
          fi

          echo "CC=clang-$VERSION" >> $GITHUB_ENV
          echo "CXX=clang++-$VERSION" >> $GITHUB_ENV

      - name: Install libc++
        if: ${{ matrix.libcxx }}
        run: |
          # Install libc++ if requested
          if [ "${{ matrix.libcxx }}" == "true" ]; then
            VERSION=$(echo ${{ matrix.compiler }} | cut -d'-' -f2) # Extracts the version number
            sudo apt-get install -y libc++-$VERSION-dev libc++abi-$VERSION-dev
            echo "CXXFLAGS=-stdlib=libc++" >> $GITHUB_ENV
          fi

      - name: Install GCC
        if: startsWith(matrix.compiler, 'g++')
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.compiler }}
          echo "CXX=${{ matrix.compiler }}" >> $GITHUB_ENV

      - name: Configure CMake
        run: |
            cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" \
                  -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                  -DCMAKE_CXX_STANDARD=17 \
                  -DANNOTATE_SNIPPETS_ENABLE_TESTING=ON

      - name: Build
        run: |
            threads=`nproc`
            cmake --build "${{github.workspace}}/build" \
                  --config ${{matrix.build_type}} --parallel $threads

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure

  build-macos:
    strategy:
      matrix:
        os: [ macos-13, macos-14, macos-15 ]
        build_type: [ Debug, Release ]

    name: Build and Test on MacOS
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake
        run: |
            cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" \
                  -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                  -DCMAKE_CXX_STANDARD=17 \
                  -DANNOTATE_SNIPPETS_ENABLE_TESTING=ON

      - name: Build
        run: |
            threads=`sysctl -n hw.logicalcpu`
            cmake --build "${{github.workspace}}/build" \
                  --config ${{matrix.build_type}} --parallel $threads

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure

  build-windows:
    strategy:
      matrix:
        build_type: [ Debug, Release ]
        os: [ windows-2019, windows-2022, windows-2025 ]

    name: Build and Test on Windows
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake
        run: |
            cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" \
                  -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
                  -DCMAKE_CXX_STANDARD=17 \
                  -DANNOTATE_SNIPPETS_ENABLE_TESTING=ON

      - name: Build
        run: |
            $threads = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
            cmake --build "${{github.workspace}}/build" `
                  --config ${{matrix.build_type}} --parallel $threads
        shell: pwsh

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: ctest -C ${{matrix.build_type}} --output-on-failure
